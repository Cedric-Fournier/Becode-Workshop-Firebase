/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Query } from '../core/query';
import { DocumentMap, MaybeDocumentMap } from '../model/collections';
import { MaybeDocument } from '../model/document';
import { DocumentKey } from '../model/document_key';
import { FirestoreError } from '../util/error';
import { LocalSerializer } from './local_serializer';
import { PersistenceTransaction } from './persistence';
import { PersistencePromise } from './persistence_promise';
import { RemoteDocumentCache } from './remote_document_cache';
import { SimpleDbTransaction } from './simple_db';
export declare class IndexedDbRemoteDocumentCache implements RemoteDocumentCache {
    private readonly serializer;
    private readonly keepDocumentChangeLog;
    /** The last id read by `getNewDocumentChanges()`. */
    private _lastProcessedDocumentChangeId;
    /**
     * @param {LocalSerializer} serializer The document serializer.
     * @param keepDocumentChangeLog Whether to keep a document change log in
     * IndexedDb. This change log is required for Multi-Tab synchronization, but
     * not needed in clients that don't share access to their remote document
     * cache.
     */
    constructor(serializer: LocalSerializer, keepDocumentChangeLog: boolean);
    readonly lastProcessedDocumentChangeId: number;
    /**
     * Starts up the remote document cache.
     *
     * Reads the ID of the last  document change from the documentChanges store.
     * Existing changes will not be returned as part of
     * `getNewDocumentChanges()`.
     */
    start(transaction: SimpleDbTransaction): PersistencePromise<void>;
    addEntries(transaction: PersistenceTransaction, maybeDocuments: MaybeDocument[]): PersistencePromise<void>;
    removeEntry(transaction: PersistenceTransaction, documentKey: DocumentKey): PersistencePromise<void>;
    getEntry(transaction: PersistenceTransaction, documentKey: DocumentKey): PersistencePromise<MaybeDocument | null>;
    getDocumentsMatchingQuery(transaction: PersistenceTransaction, query: Query): PersistencePromise<DocumentMap>;
    getNewDocumentChanges(transaction: PersistenceTransaction): PersistencePromise<MaybeDocumentMap>;
    /**
     * Removes all changes in the remote document changelog through `changeId`
     * (inclusive).
     */
    removeDocumentChangesThroughChangeId(transaction: PersistenceTransaction, changeId: number): PersistencePromise<void>;
    private synchronizeLastDocumentChangeId(documentChangesStore);
}
export declare function isDocumentChangeMissingError(err: FirestoreError): boolean;
